<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yagan Arun</title>
    <link>https://YaganArun.github.io/mlnotes/</link>
    <description>Recent content on Yagan Arun</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://YaganArun.github.io/mlnotes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Seaborn bar plot</title>
      <link>https://YaganArun.github.io/mlnotes/python/seaborn/seaborn_barplot/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/seaborn/seaborn_barplot/</guid>
      <description>import seaborn as sns import pandas as pdvehicle = [[&amp;#39;audi&amp;#39;,1] , [&amp;#39;appache&amp;#39;,2] , [&amp;#39;benz&amp;#39;,1] , [&amp;#39;lambhorghini&amp;#39;,1] , [&amp;#39;Fazer&amp;#39; , 2]] custom = pd.DataFrame(data=vehicle , columns=[&amp;#39;vehicle&amp;#39;,&amp;#39;class&amp;#39;])# x must a column from your dataset sns.barplot( x = custom[&amp;#39;class&amp;#39;] , y = custom[&amp;#39;vehicle&amp;#39;]) &amp;lt;AxesSubplot:xlabel=&#39;class&#39;, ylabel=&#39;vehicle&#39;&amp;gt;  </description>
    </item>
    
    <item>
      <title>Useful operations on a DataFrame</title>
      <link>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_useful_operations/</link>
      <pubDate>Wed, 12 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_useful_operations/</guid>
      <description>import pandas as pdcars = [[&amp;#39;Audi&amp;#39; , 10] , [&amp;#39;Apple&amp;#39; , None] , [&amp;#39;Lambhorghini&amp;#39;,10] , [&amp;#39;Bens&amp;#39;,9] , [&amp;#39;Samsung&amp;#39;,None] , [&amp;#39;Google&amp;#39;,None] , [&amp;#39;Apple&amp;#39;,None]] df = pd.DataFrame(data = cars , columns = [&amp;#39;Cars&amp;#39; , &amp;#39;Rating&amp;#39;])df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Cars Rating     0 Audi 10.0   1 Apple NaN   2 Lambhorghini 10.</description>
    </item>
    
    <item>
      <title>DataFrame apply using custom function</title>
      <link>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_apply_using_custom_function/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_apply_using_custom_function/</guid>
      <description>import pandas as pddata = [&amp;#39;audi is awsome &amp;#39; , &amp;#39;Maruthi is best&amp;#39; , &amp;#39;Benz sucks&amp;#39; , &amp;#39;Lambhoghini mind blowing&amp;#39;] df = pd.DataFrame(data , columns=[&amp;#39;feedback&amp;#39;])def custom_length(sent): return len(sent) df[&amp;#39;feedback_chars&amp;#39;] = df[&amp;#39;feedback&amp;#39;].apply(custom_length) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    feedback feedback_chars     0 audi is awsome 15   1 Maruthi is best 15   2 Benz sucks 10   3 Lambhoghini mind blowing 24     df.</description>
    </item>
    
    <item>
      <title>DataFrame apply using lambda function</title>
      <link>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_apply_using_lamda/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_apply_using_lamda/</guid>
      <description>import pandas as pddata = [&amp;#39;audi is awsome &amp;#39; , &amp;#39;Maruthi is best&amp;#39; , &amp;#39;Benz sucks&amp;#39; , &amp;#39;Lambhoghini mind blowing&amp;#39;] df = pd.DataFrame(data , columns=[&amp;#39;feedback&amp;#39;])df[&amp;#39;feedback_chars&amp;#39;] = df[&amp;#39;feedback&amp;#39;].apply( lambda x: len(x) ) df  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    feedback feedback_chars     0 audi is awsome 15   1 Maruthi is best 15   2 Benz sucks 10   3 Lambhoghini mind blowing 24     </description>
    </item>
    
    <item>
      <title>Seaborn count plot</title>
      <link>https://YaganArun.github.io/mlnotes/python/seaborn/seaborn_countplot/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/seaborn/seaborn_countplot/</guid>
      <description>import seaborn as sns import pandas as pdvehicle = [[&amp;#39;audi&amp;#39;,1] , [&amp;#39;appache&amp;#39;,2] , [&amp;#39;benz&amp;#39;,1] , [&amp;#39;lambhorghini&amp;#39;,1]] custom = pd.DataFrame(data=vehicle , columns=[&amp;#39;vehicle&amp;#39;,&amp;#39;class&amp;#39;])# x must a column from your dataset sns.countplot( x = &amp;#39;class&amp;#39; , data = custom) &amp;lt;AxesSubplot:xlabel=&#39;class&#39;, ylabel=&#39;count&#39;&amp;gt;  </description>
    </item>
    
    <item>
      <title>To find null in a DataFrame</title>
      <link>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_isnull/</link>
      <pubDate>Tue, 11 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/pandas/dataframe_isnull/</guid>
      <description>cars = [[&amp;#39;Audi&amp;#39; , 10] , [&amp;#39;Apple&amp;#39; , None] , [&amp;#39;Lambhorghini&amp;#39;,10] , [&amp;#39;Bens&amp;#39;,9] , [&amp;#39;Samsung&amp;#39;,None]]import pandas as pd custom = pd.DataFrame(data=cars , columns=[&amp;#39;Car&amp;#39;,&amp;#39;Rating&amp;#39;])custom  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    Car Rating     0 Audi 10.0   1 Apple NaN   2 Lambhorghini 10.0   3 Bens 9.</description>
    </item>
    
    <item>
      <title>F1 Score using scikit learn</title>
      <link>https://YaganArun.github.io/mlnotes/python/machinelearning/f1_score_scikit/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/machinelearning/f1_score_scikit/</guid>
      <description>from sklearn.metrics import f1_scorey_true = [0, 1, 2, 0, 1, 2] y_pred = [0, 2, 1, 0, 0, 1]f1_score_ = f1_score(y_true , y_pred , average=&amp;#39;micro&amp;#39;) f1_score_ 0.3333333333333333  </description>
    </item>
    
    <item>
      <title>List Comprehension</title>
      <link>https://YaganArun.github.io/mlnotes/python/basics/list-comprehension/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/basics/list-comprehension/</guid>
      <description>even_list = [num for num in range(40) if num % 2 == 0] print(even_list) [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38]  </description>
    </item>
    
    <item>
      <title>Simple Python</title>
      <link>https://YaganArun.github.io/mlnotes/python/basics/simple-python/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/basics/simple-python/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
    <item>
      <title>Template</title>
      <link>https://YaganArun.github.io/mlnotes/python/basics/template/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://YaganArun.github.io/mlnotes/python/basics/template/</guid>
      <description>print(&amp;#39;Hello Toronto&amp;#39;) Hello Toronto  print(2) 2  </description>
    </item>
    
  </channel>
</rss>